{"version":3,"sources":["common/index.js","logic/Calc.js","logic/engine.js","logic/Infrastructure.js","enums.js","gameVaraiables.js","Board/index.js","Meta/PlayerData.js","Meta/index.js","AppStyledElements.js","Tournament.js","App.js","serviceWorker.js","index.js"],"names":["uiConstants","messageBoxHeightArithmetic","fontPixels","messageBoxFontArithmetic","Calc","w","h","verticals","_","flatten","range","map","x","y","i","horisontals","diagDown","diagUp","cell","board","length","messageList","Engine","params","factor","n","series","this","win","blockLose","have2WaysToWin","block2WaysToLose","takeSmartStep","bestChoise","getBestChoise","appendToColumn","mark","message","sample","excludedColumns","scores","getScoreForPosition","getAILevel","maxBy","getAvailableColumns","isRoot","stateScores","results","columnsRange","onFillColumn","lastCell","getLastCellAsString","won","lost","stateScore","stateScoresForFurtherDeep","sort","a","b","slice","isOverwhelmingDifference","splice","result","includes","toggleMark","Infinity","sum","filter","sumBy","counterByMark","opponentMark","fn","every","maxHeight","res","removeFromColumn","find","findStepMatching","undefined","canWinCell","canLoseCell","winningCell","losingCell","takeAction","canLose","onEveryAvailableStep","canWin","cellsToLose","findStepsMatching","boardColumns","boardRows","aiMark","refs","Object","assign","formSeries","markCountersBySeries","Map","countBy","c","get","seriesByCell","groupBy","stringifyCell","group","mapValues","seriesArr","reduce","unitedMapByCell","currMapByCell","keys","forEach","key","push","col","lastColumn","pop","wonByMark","some","isColumnFull","PlayerType","PlayerTurn","basicInfo","engineFirst","gameVars","meta","first","level","engineSecond","second","window","engine","currentPlayer","gameMessage","width","height","localStorage","JSON","parse","type","stringify","BoardContainer","styled","div","padding","Board","props","isGameOver","rangeRight","color","random","style","border","borderRadius","background","Cell","flat","button","isLastColumn","lastColor","availableColumns","onStep","humanTurn","onClick","fontWeight","fontSize","React","Component","options","value","label","TextDiv","children","minWidth","ComponentDiv","FlexDiv","display","alignItems","PlayerData","data","turn","onChange","currVal","option","textAlign","fontFamily","paddingTop","min","max","dots","Meta","state","onRestart","margin","backgroundColor","gridTemplateColumns","setState","paddingBottom","PlayGameContianer","MessageAndBoardContainer","MessageBox","Message","p","setBoard","steps","gameVaraiables","reverse","step","lastEngine","last","currentEngine","getCurrentEngine","isTie","isCurrentPlayerType","nextPlayer","App","location","pathname","split","parseFloat","isNaN","appendState","gameOver","onpopstate","e","checkAI","setTimeout","takeStep","performAIMove","obj","isEqual","updateWindowState","history","pushState","join","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0831b7d.chunk.js","sourcesContent":["const fontPixels = 5;\nexport const uiConstants = {\n  messageBoxHeightArithmetic: `${fontPixels + 5}px + 2vmin`,\n  messageBoxFontArithmetic: `${fontPixels}px + 2vmin`\n};\n","import _ from 'lodash';\n\nexport default class Calc {\n  static formSeries(w, h) {\n    const verticals = _.flatten(\n      _.range(w).map(x =>\n        _.range(h - (4 - 1)).map(y => _.range(4).map(i => ({ x, y: y + i })))\n      )\n    );\n    const horisontals = _.flatten(\n      _.range(h).map(y =>\n        _.range(w - (4 - 1)).map(x => _.range(4).map(i => ({ x: x + i, y })))\n      )\n    );\n    const diagDown = _.flatten(\n      _.range(0, h - (4 - 1)).map(y =>\n        _.range(w - (4 - 1)).map(x =>\n          _.range(4).map(i => ({ x: x + i, y: y + i }))\n        )\n      )\n    );\n    const diagUp = _.flatten(\n      _.range(0, h - (4 - 1)).map(y =>\n        _.range(w - (4 - 1)).map(x =>\n          _.range(4).map(i => ({ x: x + i, y: 4 - 1 + y - i }))\n        )\n      )\n    );\n\n    const series = [...verticals, ...horisontals, ...diagDown, ...diagUp];\n    return series;\n  }\n\n  static stringifyCell(cell: { x: Number, y: Number }) {\n    return `${cell.x},${cell.y}`;\n  }\n\n  static getLastCellAsString(board: string[][], i) {\n    const x = i;\n    const y = board[i].length - 1;\n    return `${x},${y}`;\n  }\n}\n","import _ from 'lodash';\nimport Calc from './Calc';\nimport Infrastructure from './Infrastructure';\n\nconst messageList = [\n  'Give me your best shot!',\n  'you like that?',\n  'Failed to see this coming, ha?',\n  'Come on, show me what you got!'\n];\n\nexport default class Engine extends Infrastructure {\n  constructor(params) {\n    super(params);\n\n    this.factor = n => n ** this.board.length + this.series.length * 2;\n  }\n\n  takeStep() {\n    this.win() ||\n      this.blockLose() ||\n      this.have2WaysToWin() ||\n      this.block2WaysToLose() ||\n      this.takeSmartStep();\n  }\n\n  takeSmartStep() {\n    const bestChoise = this.getBestChoise();\n    this.appendToColumn(bestChoise, this.mark);\n    this.message = _.sample(messageList);\n  }\n\n  /** @returns {number} The index of the best column to choose */\n  getBestChoise(excludedColumns = []) {\n    const scores = this.getScoreForPosition(this.getAILevel(), this.mark, true);\n    return _.maxBy(this.getAvailableColumns(excludedColumns), i => scores[i]);\n  }\n\n  getScoreForPosition(n, mark, isRoot = false) {\n    const stateScores = [];\n    const results = this.columnsRange.map(i =>\n      this.onFillColumn(i, mark, () => {\n        const lastCell = Calc.getLastCellAsString(this.board, i);\n        if (this.won(lastCell)) {\n          return 1;\n        }\n        if (this.lost(lastCell)) {\n          return -1;\n        }\n\n        const stateScore = this.stateScore();\n        stateScores[i] = stateScore;\n        return 0;\n      })\n    );\n\n    const stateScoresForFurtherDeep = [...stateScores]\n      .sort((a, b) => (mark === this.mark ? b - a : a - b))\n      .slice(0, 3);\n\n    if (this.isOverwhelmingDifference(...stateScoresForFurtherDeep)) {\n      stateScoresForFurtherDeep.splice(1);\n    }\n\n    const scores = results.map((result, i) => {\n      return this.onFillColumn(i, mark, () => {\n        if (result === 1) return this.factor(n);\n        if (result === -1) return -this.factor(n);\n\n        if (n === 1) {\n          return stateScores[i];\n        } else if (!stateScoresForFurtherDeep.includes(stateScores[i])) {\n          return -Infinity;\n        } else {\n          return this.getScoreForPosition(n - 1, this.toggleMark(mark));\n        }\n      });\n    });\n\n    return isRoot ? scores : _.sum(scores.filter(n => n !== -Infinity));\n  }\n\n  isOverwhelmingDifference(a, b) {\n    return (a > 0 && a > b * 2) || (a < 0 && a * 2 > b);\n  }\n\n  stateScore() {\n    return (\n      _.sumBy(\n        this.series.filter(\n          counterByMark =>\n            counterByMark[this.mark] > 0 &&\n            counterByMark[this.opponentMark] === 0\n        ),\n        counterByMark => counterByMark[this.mark]\n      ) -\n      _.sumBy(\n        this.series.filter(\n          counterByMark =>\n            counterByMark[this.mark] === 0 &&\n            counterByMark[this.opponentMark] > 0\n        ),\n        counterByMark => counterByMark[this.opponentMark]\n      )\n    );\n  }\n\n  onEveryAvailableStep(mark, fn) {\n    return this.columnsRange.every(i => {\n      if (this.board[i].length === this.maxHeight) return true;\n\n      this.appendToColumn(i, mark);\n      const res = fn();\n      this.removeFromColumn(i, mark);\n      return res;\n    });\n  }\n  findStepMatching(mark, fn) {\n    return this.columnsRange.find(i => {\n      if (this.board[i].length === this.maxHeight) return false;\n\n      this.appendToColumn(i, mark);\n      const res = fn();\n      this.removeFromColumn(i, mark);\n      return res;\n    });\n  }\n\n  findStepsMatching(mark, fn) {\n    return this.columnsRange.filter(i => {\n      if (this.board[i].length === this.maxHeight) return false;\n\n      this.appendToColumn(i, mark);\n      const res = fn();\n      this.removeFromColumn(i, mark);\n      return res;\n    });\n  }\n\n  canWinCell() {\n    return this.findStepMatching(this.mark, () => this.won());\n  }\n  canWin() {\n    return this.canWinCell() !== undefined;\n  }\n\n  canLoseCell() {\n    return this.findStepMatching(this.opponentMark, () => this.lost());\n  }\n  canLose() {\n    return this.canLoseCell() !== undefined;\n  }\n\n  win() {\n    const winningCell = this.canWinCell();\n\n    if (winningCell !== undefined) {\n      this.appendToColumn(winningCell, this.mark);\n      this.message = 'Got ya!';\n    }\n\n    return winningCell !== undefined;\n  }\n\n  blockLose() {\n    const losingCell = this.canLoseCell();\n\n    if (losingCell !== undefined) {\n      this.appendToColumn(losingCell, this.mark);\n      this.message = 'Blocked ya!';\n    }\n\n    return losingCell !== undefined;\n  }\n\n  have2WaysToWin(takeAction = true) {\n    const cell = this.findStepMatching(\n      this.mark,\n      () =>\n        !this.canLose() &&\n        this.onEveryAvailableStep(this.opponentMark, () => this.canWin())\n    );\n\n    if (cell !== undefined && takeAction) {\n      this.appendToColumn(cell, this.mark);\n      this.message = 'Got ya in 2 ways!';\n    }\n\n    return cell !== undefined;\n  }\n\n  block2WaysToLose() {\n    // const cellsToLose = this.findStepsMatching(this.mark, () =>\n    //   this.onSwitchedMarks(() => this.have2WaysToWin(false))\n    // );\n    const cellsToLose = this.findStepsMatching(\n      this.mark,\n      () =>\n        this.findStepMatching(\n          this.opponentMark,\n          () =>\n            !this.canWin() &&\n            this.onEveryAvailableStep(this.mark, () => this.canLose())\n        ) !== undefined\n    );\n\n    // if only one option is forbidden - it's obvious for deep AI.\n    if (cellsToLose.length > 1) {\n      const cellsToBlock = this.getAvailableColumns(cellsToLose);\n\n      if (cellsToBlock.length === 0) return false;\n\n      const cell = this.getBestChoise(cellsToLose);\n      this.appendToColumn(cell, this.mark);\n      this.message = 'Blocked ya from 2 ways!';\n    }\n\n    return cellsToLose.length > 1;\n  }\n}\n","import _ from 'lodash';\nimport Calc from './Calc';\n\nexport default class Infrastructure {\n  constructor(params) {\n    const {\n      boardColumns,\n      board,\n      boardRows,\n      aiMark,\n      opponentMark,\n      getAILevel,\n      refs\n    } = params;\n\n    /** @type {string[][]} */\n    this.board = board || _.range(boardColumns).map(i => []);\n    /** @type {number} */\n    this.maxHeight = boardRows;\n    /** @type {string} */\n    this.mark = aiMark;\n    /** @type {string} */\n    this.opponentMark = opponentMark;\n    /** @type {number} */\n    this.getAILevel = getAILevel;\n\n    if (refs) {\n      Object.assign(this, refs);\n    } else {\n      const series = Calc.formSeries(this.board.length, this.maxHeight);\n\n      const markCountersBySeries = new Map(\n        series.map(series => [\n          series,\n          {\n            [this.mark]: 0,\n            [this.opponentMark]: 0,\n            ..._.countBy(series, c => this.board[c.x][c.y])\n          }\n        ])\n      );\n\n      this.series = series.map(series => markCountersBySeries.get(series));\n\n      this.seriesByCell = _.range(4)\n        .map(i => _.groupBy(series, series => Calc.stringifyCell(series[i])))\n        .map(group =>\n          _.mapValues(group, seriesArr =>\n            seriesArr.map(series => markCountersBySeries.get(series))\n          )\n        )\n        // _.merge but keep original pointers\n        .reduce((unitedMapByCell, currMapByCell) => {\n          Object.keys(currMapByCell).forEach(key => {\n            if (key in unitedMapByCell) {\n              unitedMapByCell[key].push(...currMapByCell[key]);\n            } else {\n              unitedMapByCell[key] = currMapByCell[key];\n            }\n          });\n          return unitedMapByCell;\n        }, {});\n    }\n\n    this.columnsRange = _.range(this.board.length);\n  }\n\n  /** @param {number} col */\n  appendToColumn(col, mark) {\n    this.board[col].push(mark);\n    this.lastColumn = col;\n    this.seriesByCell[Calc.getLastCellAsString(this.board, col)].forEach(\n      counterByMark => counterByMark[mark]++\n    );\n  }\n\n  /** @param {number} col */\n  removeFromColumn(col, mark) {\n    this.seriesByCell[Calc.getLastCellAsString(this.board, col)].forEach(\n      counterByMark => counterByMark[mark]--\n    );\n    this.board[col].pop();\n  }\n\n  isTie() {\n    return this.board.every(col => col.length === this.maxHeight);\n  }\n\n  won(lastCell) {\n    return this.wonByMark(lastCell, this.mark);\n  }\n  lost(lastCell) {\n    return this.wonByMark(lastCell, this.opponentMark);\n  }\n\n  wonByMark(lastCell, mark) {\n    if (lastCell) {\n      return this.seriesByCell[lastCell].some(\n        counterByMark => counterByMark[mark] === 4\n      );\n    } else {\n      return this.series.some(counterByMark => counterByMark[mark] === 4);\n    }\n  }\n\n  toggleMark(mark) {\n    return mark === this.mark ? this.opponentMark : this.mark;\n  }\n\n  onFillColumn(i, mark, fn) {\n    if (this.isColumnFull(i)) {\n      return 0;\n    }\n    this.appendToColumn(i, mark);\n    const res = fn();\n    this.removeFromColumn(i, mark);\n    return res;\n  }\n\n  isColumnFull(i) {\n    return this.board[i].length === this.maxHeight;\n  }\n\n  onSwitchedMarks(fn) {\n    [this.mark, this.opponentMark] = [this.opponentMark, this.mark];\n    const res = fn();\n    [this.mark, this.opponentMark] = [this.opponentMark, this.mark];\n    return res;\n  }\n\n  getAvailableColumns(excludedColumns = []) {\n    return this.columnsRange.filter(\n      i => !excludedColumns.includes(i) && this.board[i].length < this.maxHeight\n    );\n  }\n}\n","export const PlayerType = {\n  AI: 1,\n  HUMAN: 2\n};\n\nexport const PlayerTurn = {\n  FIRST: 1,\n  SECOND: 2\n};\n","import Engine from './logic/engine';\nimport _ from 'lodash';\nimport { PlayerTurn, PlayerType } from './enums';\n\nexport const firstMark = 1;\nexport const secondMark = 2;\n\nconst basicInfo = {\n  board: _.range(7).map(i => []),\n  boardColumns: 7,\n  boardRows: 6\n};\nconst engineFirst = new Engine({\n  ...basicInfo,\n  opponentMark: secondMark,\n  aiMark: firstMark,\n  getAILevel: () => gameVars.meta.first.level\n});\nconst engineSecond = new Engine({\n  ...basicInfo,\n  opponentMark: firstMark,\n  aiMark: secondMark,\n  getAILevel: () => gameVars.meta.second.level,\n  refs: {\n    series: engineFirst.series,\n    seriesByCell: engineFirst.seriesByCell\n  }\n});\n\nwindow.engine = engineSecond;\nconst height = basicInfo.boardRows;\nconst board = basicInfo.board;\nconst width = basicInfo.boardColumns;\n\nconst gameMessage = '';\n\nconst currentPlayer = PlayerTurn.FIRST;\n\nconst gameVars = {\n  currentPlayer,\n  gameMessage,\n  width,\n  height,\n  board,\n  engineFirst,\n  engineSecond,\n  get meta() {\n    return localStorage.meta\n      ? JSON.parse(localStorage.meta)\n      : {\n          first: { type: PlayerType.HUMAN },\n          second: { type: PlayerType.AI, level: 7 }\n        };\n  },\n  set meta(meta) {\n    localStorage.meta = JSON.stringify(meta);\n  }\n};\nexport default gameVars;\n","import React from 'react';\nimport _ from 'lodash';\nimport { uiConstants } from '../common';\nimport styled from 'styled-components/macro';\nimport { firstMark } from '../gameVaraiables';\nconst padding = 10;\n\nconst BoardContainer = styled.div`\n  width: calc(100% - ${padding * 2}px);\n  height: calc(\n    100% - ${padding * 2}px - (${uiConstants.messageBoxHeightArithmetic})\n  );\n  background-color: #7f7878;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(7, 1fr);\n  grid-row-gap: 10px;\n  grid-column-gap: 10px;\n  padding: ${padding}px;\n`;\n\ntype Props = {\n  meta: {\n    first: { type: Number, level?: Number },\n    second: { type: Number, level?: Number }\n  },\n  steps: number[],\n  onStep: (col: number) => void,\n  isGameOver: Boolean,\n  width: Number,\n  height: Number,\n  board: any[][],\n  lastColumn: Number,\n  lastColor: String,\n  availableColumns: Number[],\n  humanTurn: Boolean\n};\n\nexport default class Board extends React.Component<Props> {\n  render() {\n    const { isGameOver, width, height, board, lastColumn } = this.props;\n\n    return (\n      <BoardContainer>\n        {_.rangeRight(height)\n          .map(i => board.map(col => Cell(col[i])))\n          .flat()}\n        {_.range(width).map(i => this.button(i, isGameOver, lastColumn === i))}\n      </BoardContainer>\n    );\n  }\n\n  button(i, isGameOver, isLastColumn) {\n    const { lastColor, availableColumns, onStep, humanTurn } = this.props;\n\n    let onClick = () => {};\n    if (!isGameOver && humanTurn && availableColumns.includes(i)) {\n      onClick = () => onStep(i);\n    }\n\n    return (\n      <button\n        style={{\n          borderRadius: '10px',\n          background: isGameOver\n            ? `repeating-linear-gradient(45deg, black, ${lastColor} 100%)`\n            : isLastColumn\n            ? `repeating-linear-gradient(45deg, ${lastColor}, transparent 100%)`\n            : 'repeating-linear-gradient(45deg, black, transparent 100%)',\n          color: 'white',\n          fontWeight: 'bold',\n          fontSize: '2.7vw'\n        }}\n        key={i}\n        onClick={onClick}\n      >\n        {i + 1}\n      </button>\n    );\n  }\n}\n\nfunction Cell(mark) {\n  const color = mark === firstMark ? 'red' : 'blue';\n  return (\n    <div\n      key={_.random(1e9)}\n      style={{\n        border: mark ? `0.9vw solid ${color}` : 'none',\n        borderRadius: '100%',\n        background: mark\n          ? mark === firstMark\n            ? `radial-gradient(circle, red 60%,transparent 100%)`\n            : `radial-gradient(circle, blue 60%, violet 90%)`\n          : 'gray'\n      }}\n    ></div>\n  );\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { PlayerType } from '../enums';\n\nconst options = [\n  { value: PlayerType.HUMAN, label: 'Human' },\n  { value: PlayerType.AI, label: 'AI' }\n];\n\nconst DEFAULT_LEVEL = 7;\nconst MAX_LEVEL = 12;\n\nfunction TextDiv({ children }) {\n  return <div style={{ minWidth: 120 }}>{children}</div>;\n}\nfunction ComponentDiv({ children }) {\n  return <div style={{ minWidth: 200, color: 'black' }}>{children}</div>;\n}\nfunction FlexDiv({ children }) {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>{children}</div>\n  );\n}\n\ntype PlayerMeta = {\n  type: Number,\n  level: Number\n};\n\ntype Props = {\n  data: PlayerMeta,\n  turn: String,\n  onChange: (data: PlayerMeta) => void\n};\n\nexport default function PlayerData({ data, turn, onChange }: Props) {\n  const currVal = options.find(option => option.value === data.type);\n  return (\n    <div\n      style={{\n        textAlign: 'left',\n        padding: 20,\n        fontFamily: 'arial'\n      }}\n    >\n      <FlexDiv>\n        <TextDiv>\n          <span>{turn + ' Player:'}</span>\n        </TextDiv>\n        <ComponentDiv>\n          <Select\n            value={currVal}\n            onChange={type =>\n              onChange({ type: type.value, level: data.level || DEFAULT_LEVEL })\n            }\n            options={options}\n          />\n        </ComponentDiv>\n      </FlexDiv>\n      {currVal.value === PlayerType.AI && (\n        <div style={{ paddingTop: 10 }}>\n          <FlexDiv>\n            <TextDiv>\n              <label>Level: </label>\n            </TextDiv>\n            <ComponentDiv>\n              <Slider\n                min={1}\n                max={MAX_LEVEL}\n                value={data.level || DEFAULT_LEVEL}\n                dots={true}\n                onChange={level => onChange({ type: data.type, level })}\n              />\n            </ComponentDiv>\n          </FlexDiv>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport PlayerData from './PlayerData';\n\nexport default class Meta extends React.Component {\n  constructor(props) {\n    super(props);\n    const { first, second } = this.props;\n    this.state = {\n      first,\n      second\n    };\n  }\n\n  render() {\n    const { first, second } = this.state;\n    const { onChange = () => {}, onRestart } = this.props;\n\n    return (\n      <div\n        style={{\n          margin: 20,\n          backgroundColor: '#7f7878',\n          display: 'grid',\n          gridTemplateColumns: 'min-content',\n          borderRadius: '30px',\n          color: 'white',\n          fontWeight: 'bold'\n        }}\n      >\n        <PlayerData\n          data={first}\n          turn={'First'}\n          onChange={first =>\n            this.setState({ ...this.state, first }) &&\n            onChange({ first, second })\n          }\n        />\n        <PlayerData\n          data={second}\n          turn={'Second'}\n          onChange={second =>\n            this.setState({ ...this.state, second }) &&\n            onChange({ first, second })\n          }\n        />\n\n        <button\n          style={{\n            margin: 20,\n            paddingTop: 10,\n            paddingBottom: 10,\n            fontSize: 25,\n            fontFamily: 'arial',\n            fontWeight: 'bold',\n            color: 'white',\n            background:\n              'repeating-linear-gradient(45deg, transparent, black, transparent 100%)',\n            borderRadius: 15\n          }}\n          onClick={() => onRestart({ ...this.state })}\n        >\n          Restart\n        </button>\n      </div>\n    );\n  }\n}\n","import styled from 'styled-components/macro';\nimport { uiConstants } from './common';\n\nexport const PlayGameContianer = styled.div`\n  text-align: center;\n  margin: auto;\n  background-color: #282c34;\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst [width, minWidth, maxWidth] = ['40vmax', '300px', '600px'];\nexport const MessageAndBoardContainer = styled.div`\n  width: ${width};\n  height: calc(${width} + ${uiConstants.messageBoxHeightArithmetic});\n  min-width: ${minWidth};\n  min-height: calc(${minWidth} + ${uiConstants.messageBoxHeightArithmetic});\n  max-width: ${maxWidth};\n  max-height: calc(${maxWidth} + ${uiConstants.messageBoxHeightArithmetic});\n  padding: 10px;\n`;\n\nexport const MessageBox = styled.div`\n  padding: 10px 0;\n  width: 100%;\n  font-size: calc(${uiConstants.messageBoxFontArithmetic});\n  min-height: calc(${uiConstants.messageBoxHeightArithmetic});\n`;\n\nexport const Message = styled.p`\n  margin: 0 0;\n  color: white;\n  font-weight: bold;\n  min-height: calc(${uiConstants.messageBoxFontArithmetic});\n`;\n","import { PlayerTurn } from './enums';\nimport _ from 'lodash';\nimport gameVaraiables, { firstMark, secondMark } from './gameVaraiables';\n\nexport const setBoard = steps => {\n  const { board, engineFirst } = gameVaraiables;\n\n  if (steps) {\n    board.forEach((col, i) =>\n      [...col].reverse().forEach(mark => engineFirst.removeFromColumn(i, mark))\n    );\n    steps.forEach((step, i) =>\n      engineFirst.appendToColumn(step, i % 2 ? secondMark : firstMark)\n    );\n  }\n\n  gameVaraiables.currentPlayer =\n    steps.length % 2 === 0 ? PlayerTurn.FIRST : PlayerTurn.SECOND;\n  lastEngine().lastColumn = _.last(steps);\n};\n\nexport const isGameOver = () => {\n  const currentEngine = getCurrentEngine();\n\n  return currentEngine.lost() || currentEngine.isTie();\n};\n\nexport const performAIMove = onStep => {\n  const currentEngine = getCurrentEngine();\n\n  currentEngine.takeStep();\n  gameVaraiables.gameMessage = currentEngine.message;\n\n  onStep(currentEngine.lastColumn);\n};\n\nexport const isCurrentPlayerType = n => {\n  const { currentPlayer, meta } = gameVaraiables;\n\n  return currentPlayer === PlayerTurn.FIRST\n    ? meta.first.type === n\n    : meta.second.type === n;\n};\n\nexport const switchPlayer = () => {\n  gameVaraiables.currentPlayer = nextPlayer();\n};\nexport const nextPlayer = () => 3 - gameVaraiables.currentPlayer;\n\nexport const getCurrentEngine = () => {\n  const { currentPlayer, engineFirst, engineSecond } = gameVaraiables;\n  return currentPlayer === PlayerTurn.FIRST ? engineFirst : engineSecond;\n};\n\nexport const lastEngine = () => {\n  const { currentPlayer, engineFirst, engineSecond } = gameVaraiables;\n  return currentPlayer === PlayerTurn.FIRST ? engineSecond : engineFirst;\n};\n\nexport const getCurrentMark = () => {\n  const { currentPlayer } = gameVaraiables;\n  return currentPlayer === PlayerTurn.FIRST ? firstMark : secondMark;\n};\n","import React from 'react';\nimport _ from 'lodash';\n\nimport Board from './Board';\nimport Meta from './Meta';\nimport { PlayerType, PlayerTurn } from './enums';\n\nimport {\n  PlayGameContianer,\n  MessageAndBoardContainer,\n  MessageBox,\n  Message\n} from './AppStyledElements';\nimport gameVaraiables from './gameVaraiables';\nimport {\n  performAIMove,\n  isGameOver,\n  lastEngine,\n  switchPlayer,\n  isCurrentPlayerType,\n  getCurrentEngine,\n  getCurrentMark,\n  setBoard,\n  nextPlayer\n} from './Tournament';\n\nexport default class App extends React.Component {\n  state = {\n    steps: window.location.pathname\n      .split('/')\n      .pop()\n      .split('')\n      .map(parseFloat)\n      .filter(n => !isNaN(n))\n  };\n\n  constructor(props) {\n    super(props);\n\n    window.onpopstate = e => {\n      if (e.state) {\n        setBoard(e.state.steps);\n        this.appendState({ steps: e.state.steps });\n      }\n    };\n    setBoard(this.state.steps);\n\n    this.gameOver = false;\n  }\n\n  componentDidMount() {\n    this.checkAI();\n  }\n\n  componentDidUpdate() {\n    this.checkAI();\n  }\n\n  checkAI() {\n    if (!this.gameOver) {\n      if (isGameOver()) {\n        this.gameOver = true;\n        gameVaraiables.gameMessage = getCurrentEngine().lost()\n          ? `Player ${nextPlayer()} Won!`\n          : `It's a Draw`;\n        this.appendState();\n      } else if (isCurrentPlayerType(PlayerType.AI)) {\n        setTimeout(() => {\n          performAIMove(this.onStep);\n        }, 100);\n      }\n    }\n  }\n\n  onStep = step => {\n    if (isCurrentPlayerType(PlayerType.HUMAN)) {\n      getCurrentEngine().appendToColumn(step, getCurrentMark());\n      gameVaraiables.gameMessage = '';\n    }\n    switchPlayer();\n    this.appendState({ steps: [...this.state.steps, step] });\n  };\n\n  appendState(obj) {\n    if (_.get(obj, 'steps') && !_.isEqual(obj.steps, this.state.steps)) {\n      App.updateWindowState(obj.steps);\n    }\n    this.setState({ ...this.state, ...obj });\n  }\n\n  static updateWindowState(steps) {\n    window.history.pushState({ steps }, '4 In a Row', '/' + steps.join(''));\n  }\n\n  render() {\n    const { steps } = this.state;\n    const {\n      gameMessage,\n      width,\n      height,\n      board,\n      meta,\n      currentPlayer,\n      engineFirst\n    } = gameVaraiables;\n    const lastColumn = lastEngine().lastColumn;\n\n    return (\n      <PlayGameContianer>\n        <MessageAndBoardContainer>\n          <MessageBox>\n            <Message>{gameMessage}</Message>\n          </MessageBox>\n          <Board\n            steps={steps}\n            onStep={this.onStep}\n            meta={meta}\n            isGameOver={isGameOver()}\n            width={width}\n            height={height}\n            board={board}\n            lastColumn={lastColumn}\n            lastColor={currentPlayer === PlayerTurn.SECOND ? 'red' : 'blue'}\n            availableColumns={engineFirst.getAvailableColumns()}\n            humanTurn={isCurrentPlayerType(PlayerType.HUMAN)}\n          />\n        </MessageAndBoardContainer>\n        <Meta\n          first={meta.first}\n          second={meta.second}\n          onRestart={this.onRestart}\n        />\n      </PlayGameContianer>\n    );\n  }\n\n  onRestart = meta => {\n    this.gameOver = false;\n    gameVaraiables.meta = meta;\n    gameVaraiables.gameMessage = '';\n    setBoard([]);\n    this.appendState({ steps: [] });\n  };\n\n  // onMessage(message) {\n  //   if (this.atLeastOneHumanPlayer() && this.state.message !== message) {\n  //     this.appendState({ message });\n  //   }\n  // }\n\n  // atLeastOneHumanPlayer() {\n  //   const { first, second } = this.state.meta;\n  //   return first.type === PlayerType.HUMAN || second.type === PlayerType.HUMAN;\n  // }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}